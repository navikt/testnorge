/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.nav.registre.testnorge.libs.avro.hendelse;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Hendelse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3955270608198737932L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Hendelse\",\"namespace\":\"no.nav.registre.testnorge.avro.hendelse\",\"fields\":[{\"name\":\"ident\",\"type\":\"string\"},{\"name\":\"fom\",\"type\":\"string\"},{\"name\":\"tom\",\"type\":[\"string\",\"null\"]},{\"name\":\"type\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Hendelse> ENCODER =
      new BinaryMessageEncoder<Hendelse>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Hendelse> DECODER =
      new BinaryMessageDecoder<Hendelse>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Hendelse> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Hendelse> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Hendelse> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Hendelse>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Hendelse to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Hendelse from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Hendelse instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Hendelse fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence ident;
  @Deprecated public java.lang.CharSequence fom;
  @Deprecated public java.lang.CharSequence tom;
  @Deprecated public java.lang.CharSequence type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Hendelse() {}

  /**
   * All-args constructor.
   * @param ident The new value for ident
   * @param fom The new value for fom
   * @param tom The new value for tom
   * @param type The new value for type
   */
  public Hendelse(java.lang.CharSequence ident, java.lang.CharSequence fom, java.lang.CharSequence tom, java.lang.CharSequence type) {
    this.ident = ident;
    this.fom = fom;
    this.tom = tom;
    this.type = type;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ident;
    case 1: return fom;
    case 2: return tom;
    case 3: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ident = (java.lang.CharSequence)value$; break;
    case 1: fom = (java.lang.CharSequence)value$; break;
    case 2: tom = (java.lang.CharSequence)value$; break;
    case 3: type = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ident' field.
   * @return The value of the 'ident' field.
   */
  public java.lang.CharSequence getIdent() {
    return ident;
  }


  /**
   * Sets the value of the 'ident' field.
   * @param value the value to set.
   */
  public void setIdent(java.lang.CharSequence value) {
    this.ident = value;
  }

  /**
   * Gets the value of the 'fom' field.
   * @return The value of the 'fom' field.
   */
  public java.lang.CharSequence getFom() {
    return fom;
  }


  /**
   * Sets the value of the 'fom' field.
   * @param value the value to set.
   */
  public void setFom(java.lang.CharSequence value) {
    this.fom = value;
  }

  /**
   * Gets the value of the 'tom' field.
   * @return The value of the 'tom' field.
   */
  public java.lang.CharSequence getTom() {
    return tom;
  }


  /**
   * Sets the value of the 'tom' field.
   * @param value the value to set.
   */
  public void setTom(java.lang.CharSequence value) {
    this.tom = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Creates a new Hendelse RecordBuilder.
   * @return A new Hendelse RecordBuilder
   */
  public static Hendelse.Builder newBuilder() {
    return new Hendelse.Builder();
  }

  /**
   * Creates a new Hendelse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Hendelse RecordBuilder
   */
  public static Hendelse.Builder newBuilder(Hendelse.Builder other) {
    if (other == null) {
      return new Hendelse.Builder();
    } else {
      return new Hendelse.Builder(other);
    }
  }

  /**
   * Creates a new Hendelse RecordBuilder by copying an existing Hendelse instance.
   * @param other The existing instance to copy.
   * @return A new Hendelse RecordBuilder
   */
  public static Hendelse.Builder newBuilder(Hendelse other) {
    if (other == null) {
      return new Hendelse.Builder();
    } else {
      return new Hendelse.Builder(other);
    }
  }

  /**
   * RecordBuilder for Hendelse instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Hendelse>
    implements org.apache.avro.data.RecordBuilder<Hendelse> {

    private java.lang.CharSequence ident;
    private java.lang.CharSequence fom;
    private java.lang.CharSequence tom;
    private java.lang.CharSequence type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Hendelse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ident)) {
        this.ident = data().deepCopy(fields()[0].schema(), other.ident);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fom)) {
        this.fom = data().deepCopy(fields()[1].schema(), other.fom);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.tom)) {
        this.tom = data().deepCopy(fields()[2].schema(), other.tom);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Hendelse instance
     * @param other The existing instance to copy.
     */
    private Builder(Hendelse other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.ident)) {
        this.ident = data().deepCopy(fields()[0].schema(), other.ident);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fom)) {
        this.fom = data().deepCopy(fields()[1].schema(), other.fom);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tom)) {
        this.tom = data().deepCopy(fields()[2].schema(), other.tom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'ident' field.
      * @return The value.
      */
    public java.lang.CharSequence getIdent() {
      return ident;
    }


    /**
      * Sets the value of the 'ident' field.
      * @param value The value of 'ident'.
      * @return This builder.
      */
    public Hendelse.Builder setIdent(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ident = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ident' field has been set.
      * @return True if the 'ident' field has been set, false otherwise.
      */
    public boolean hasIdent() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ident' field.
      * @return This builder.
      */
    public Hendelse.Builder clearIdent() {
      ident = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fom' field.
      * @return The value.
      */
    public java.lang.CharSequence getFom() {
      return fom;
    }


    /**
      * Sets the value of the 'fom' field.
      * @param value The value of 'fom'.
      * @return This builder.
      */
    public Hendelse.Builder setFom(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fom = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fom' field has been set.
      * @return True if the 'fom' field has been set, false otherwise.
      */
    public boolean hasFom() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fom' field.
      * @return This builder.
      */
    public Hendelse.Builder clearFom() {
      fom = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tom' field.
      * @return The value.
      */
    public java.lang.CharSequence getTom() {
      return tom;
    }


    /**
      * Sets the value of the 'tom' field.
      * @param value The value of 'tom'.
      * @return This builder.
      */
    public Hendelse.Builder setTom(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.tom = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tom' field has been set.
      * @return True if the 'tom' field has been set, false otherwise.
      */
    public boolean hasTom() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tom' field.
      * @return This builder.
      */
    public Hendelse.Builder clearTom() {
      tom = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public Hendelse.Builder setType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public Hendelse.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Hendelse build() {
      try {
        Hendelse record = new Hendelse();
        record.ident = fieldSetFlags()[0] ? this.ident : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.fom = fieldSetFlags()[1] ? this.fom : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.tom = fieldSetFlags()[2] ? this.tom : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Hendelse>
    WRITER$ = (org.apache.avro.io.DatumWriter<Hendelse>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Hendelse>
    READER$ = (org.apache.avro.io.DatumReader<Hendelse>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.ident);

    out.writeString(this.fom);

    if (this.tom == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.tom);
    }

    out.writeString(this.type);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ident = in.readString(this.ident instanceof Utf8 ? (Utf8)this.ident : null);

      this.fom = in.readString(this.fom instanceof Utf8 ? (Utf8)this.fom : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.tom = null;
      } else {
        this.tom = in.readString(this.tom instanceof Utf8 ? (Utf8)this.tom : null);
      }

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ident = in.readString(this.ident instanceof Utf8 ? (Utf8)this.ident : null);
          break;

        case 1:
          this.fom = in.readString(this.fom instanceof Utf8 ? (Utf8)this.fom : null);
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.tom = null;
          } else {
            this.tom = in.readString(this.tom instanceof Utf8 ? (Utf8)this.tom : null);
          }
          break;

        case 3:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}











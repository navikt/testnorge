/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.nav.registre.testnorge.libs.avro.person;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1821832968377196045L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"no.nav.registre.testnorge.libs.avro.person\",\"fields\":[{\"name\":\"ident\",\"type\":\"string\"},{\"name\":\"foedselsdato\",\"type\":\"string\"},{\"name\":\"fornavn\",\"type\":\"string\"},{\"name\":\"mellomnavn\",\"type\":[\"string\",\"null\"]},{\"name\":\"etternavn\",\"type\":\"string\"},{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"adresse\",\"type\":[{\"type\":\"record\",\"name\":\"Adresse\",\"fields\":[{\"name\":\"gatenavn\",\"type\":[\"string\",\"null\"]},{\"name\":\"postnummer\",\"type\":[\"string\",\"null\"]},{\"name\":\"poststed\",\"type\":[\"string\",\"null\"]},{\"name\":\"kommunenummer\",\"type\":[\"string\",\"null\"]}]},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Person> ENCODER =
      new BinaryMessageEncoder<Person>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Person> DECODER =
      new BinaryMessageDecoder<Person>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Person> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Person> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Person> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Person>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Person to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Person from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Person instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Person fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence ident;
   private java.lang.CharSequence foedselsdato;
   private java.lang.CharSequence fornavn;
   private java.lang.CharSequence mellomnavn;
   private java.lang.CharSequence etternavn;
   private java.util.List<java.lang.CharSequence> tags;
   private no.nav.registre.testnorge.libs.avro.person.Adresse adresse;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Person() {}

  /**
   * All-args constructor.
   * @param ident The new value for ident
   * @param foedselsdato The new value for foedselsdato
   * @param fornavn The new value for fornavn
   * @param mellomnavn The new value for mellomnavn
   * @param etternavn The new value for etternavn
   * @param tags The new value for tags
   * @param adresse The new value for adresse
   */
  public Person(java.lang.CharSequence ident, java.lang.CharSequence foedselsdato, java.lang.CharSequence fornavn, java.lang.CharSequence mellomnavn, java.lang.CharSequence etternavn, java.util.List<java.lang.CharSequence> tags, no.nav.registre.testnorge.libs.avro.person.Adresse adresse) {
    this.ident = ident;
    this.foedselsdato = foedselsdato;
    this.fornavn = fornavn;
    this.mellomnavn = mellomnavn;
    this.etternavn = etternavn;
    this.tags = tags;
    this.adresse = adresse;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ident;
    case 1: return foedselsdato;
    case 2: return fornavn;
    case 3: return mellomnavn;
    case 4: return etternavn;
    case 5: return tags;
    case 6: return adresse;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ident = (java.lang.CharSequence)value$; break;
    case 1: foedselsdato = (java.lang.CharSequence)value$; break;
    case 2: fornavn = (java.lang.CharSequence)value$; break;
    case 3: mellomnavn = (java.lang.CharSequence)value$; break;
    case 4: etternavn = (java.lang.CharSequence)value$; break;
    case 5: tags = (java.util.List<java.lang.CharSequence>)value$; break;
    case 6: adresse = (no.nav.registre.testnorge.libs.avro.person.Adresse)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'ident' field.
   * @return The value of the 'ident' field.
   */
  public java.lang.CharSequence getIdent() {
    return ident;
  }


  /**
   * Sets the value of the 'ident' field.
   * @param value the value to set.
   */
  public void setIdent(java.lang.CharSequence value) {
    this.ident = value;
  }

  /**
   * Gets the value of the 'foedselsdato' field.
   * @return The value of the 'foedselsdato' field.
   */
  public java.lang.CharSequence getFoedselsdato() {
    return foedselsdato;
  }


  /**
   * Sets the value of the 'foedselsdato' field.
   * @param value the value to set.
   */
  public void setFoedselsdato(java.lang.CharSequence value) {
    this.foedselsdato = value;
  }

  /**
   * Gets the value of the 'fornavn' field.
   * @return The value of the 'fornavn' field.
   */
  public java.lang.CharSequence getFornavn() {
    return fornavn;
  }


  /**
   * Sets the value of the 'fornavn' field.
   * @param value the value to set.
   */
  public void setFornavn(java.lang.CharSequence value) {
    this.fornavn = value;
  }

  /**
   * Gets the value of the 'mellomnavn' field.
   * @return The value of the 'mellomnavn' field.
   */
  public java.lang.CharSequence getMellomnavn() {
    return mellomnavn;
  }


  /**
   * Sets the value of the 'mellomnavn' field.
   * @param value the value to set.
   */
  public void setMellomnavn(java.lang.CharSequence value) {
    this.mellomnavn = value;
  }

  /**
   * Gets the value of the 'etternavn' field.
   * @return The value of the 'etternavn' field.
   */
  public java.lang.CharSequence getEtternavn() {
    return etternavn;
  }


  /**
   * Sets the value of the 'etternavn' field.
   * @param value the value to set.
   */
  public void setEtternavn(java.lang.CharSequence value) {
    this.etternavn = value;
  }

  /**
   * Gets the value of the 'tags' field.
   * @return The value of the 'tags' field.
   */
  public java.util.List<java.lang.CharSequence> getTags() {
    return tags;
  }


  /**
   * Sets the value of the 'tags' field.
   * @param value the value to set.
   */
  public void setTags(java.util.List<java.lang.CharSequence> value) {
    this.tags = value;
  }

  /**
   * Gets the value of the 'adresse' field.
   * @return The value of the 'adresse' field.
   */
  public no.nav.registre.testnorge.libs.avro.person.Adresse getAdresse() {
    return adresse;
  }


  /**
   * Sets the value of the 'adresse' field.
   * @param value the value to set.
   */
  public void setAdresse(no.nav.registre.testnorge.libs.avro.person.Adresse value) {
    this.adresse = value;
  }

  /**
   * Creates a new Person RecordBuilder.
   * @return A new Person RecordBuilder
   */
  public static no.nav.registre.testnorge.libs.avro.person.Person.Builder newBuilder() {
    return new no.nav.registre.testnorge.libs.avro.person.Person.Builder();
  }

  /**
   * Creates a new Person RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Person RecordBuilder
   */
  public static no.nav.registre.testnorge.libs.avro.person.Person.Builder newBuilder(no.nav.registre.testnorge.libs.avro.person.Person.Builder other) {
    if (other == null) {
      return new no.nav.registre.testnorge.libs.avro.person.Person.Builder();
    } else {
      return new no.nav.registre.testnorge.libs.avro.person.Person.Builder(other);
    }
  }

  /**
   * Creates a new Person RecordBuilder by copying an existing Person instance.
   * @param other The existing instance to copy.
   * @return A new Person RecordBuilder
   */
  public static no.nav.registre.testnorge.libs.avro.person.Person.Builder newBuilder(no.nav.registre.testnorge.libs.avro.person.Person other) {
    if (other == null) {
      return new no.nav.registre.testnorge.libs.avro.person.Person.Builder();
    } else {
      return new no.nav.registre.testnorge.libs.avro.person.Person.Builder(other);
    }
  }

  /**
   * RecordBuilder for Person instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Person>
    implements org.apache.avro.data.RecordBuilder<Person> {

    private java.lang.CharSequence ident;
    private java.lang.CharSequence foedselsdato;
    private java.lang.CharSequence fornavn;
    private java.lang.CharSequence mellomnavn;
    private java.lang.CharSequence etternavn;
    private java.util.List<java.lang.CharSequence> tags;
    private no.nav.registre.testnorge.libs.avro.person.Adresse adresse;
    private no.nav.registre.testnorge.libs.avro.person.Adresse.Builder adresseBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.nav.registre.testnorge.libs.avro.person.Person.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ident)) {
        this.ident = data().deepCopy(fields()[0].schema(), other.ident);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.foedselsdato)) {
        this.foedselsdato = data().deepCopy(fields()[1].schema(), other.foedselsdato);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.fornavn)) {
        this.fornavn = data().deepCopy(fields()[2].schema(), other.fornavn);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.mellomnavn)) {
        this.mellomnavn = data().deepCopy(fields()[3].schema(), other.mellomnavn);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.etternavn)) {
        this.etternavn = data().deepCopy(fields()[4].schema(), other.etternavn);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.tags)) {
        this.tags = data().deepCopy(fields()[5].schema(), other.tags);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.adresse)) {
        this.adresse = data().deepCopy(fields()[6].schema(), other.adresse);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasAdresseBuilder()) {
        this.adresseBuilder = no.nav.registre.testnorge.libs.avro.person.Adresse.newBuilder(other.getAdresseBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Person instance
     * @param other The existing instance to copy.
     */
    private Builder(no.nav.registre.testnorge.libs.avro.person.Person other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.ident)) {
        this.ident = data().deepCopy(fields()[0].schema(), other.ident);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.foedselsdato)) {
        this.foedselsdato = data().deepCopy(fields()[1].schema(), other.foedselsdato);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fornavn)) {
        this.fornavn = data().deepCopy(fields()[2].schema(), other.fornavn);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mellomnavn)) {
        this.mellomnavn = data().deepCopy(fields()[3].schema(), other.mellomnavn);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.etternavn)) {
        this.etternavn = data().deepCopy(fields()[4].schema(), other.etternavn);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tags)) {
        this.tags = data().deepCopy(fields()[5].schema(), other.tags);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.adresse)) {
        this.adresse = data().deepCopy(fields()[6].schema(), other.adresse);
        fieldSetFlags()[6] = true;
      }
      this.adresseBuilder = null;
    }

    /**
      * Gets the value of the 'ident' field.
      * @return The value.
      */
    public java.lang.CharSequence getIdent() {
      return ident;
    }


    /**
      * Sets the value of the 'ident' field.
      * @param value The value of 'ident'.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder setIdent(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ident = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ident' field has been set.
      * @return True if the 'ident' field has been set, false otherwise.
      */
    public boolean hasIdent() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ident' field.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder clearIdent() {
      ident = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'foedselsdato' field.
      * @return The value.
      */
    public java.lang.CharSequence getFoedselsdato() {
      return foedselsdato;
    }


    /**
      * Sets the value of the 'foedselsdato' field.
      * @param value The value of 'foedselsdato'.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder setFoedselsdato(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.foedselsdato = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'foedselsdato' field has been set.
      * @return True if the 'foedselsdato' field has been set, false otherwise.
      */
    public boolean hasFoedselsdato() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'foedselsdato' field.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder clearFoedselsdato() {
      foedselsdato = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fornavn' field.
      * @return The value.
      */
    public java.lang.CharSequence getFornavn() {
      return fornavn;
    }


    /**
      * Sets the value of the 'fornavn' field.
      * @param value The value of 'fornavn'.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder setFornavn(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.fornavn = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fornavn' field has been set.
      * @return True if the 'fornavn' field has been set, false otherwise.
      */
    public boolean hasFornavn() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'fornavn' field.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder clearFornavn() {
      fornavn = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'mellomnavn' field.
      * @return The value.
      */
    public java.lang.CharSequence getMellomnavn() {
      return mellomnavn;
    }


    /**
      * Sets the value of the 'mellomnavn' field.
      * @param value The value of 'mellomnavn'.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder setMellomnavn(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.mellomnavn = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'mellomnavn' field has been set.
      * @return True if the 'mellomnavn' field has been set, false otherwise.
      */
    public boolean hasMellomnavn() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'mellomnavn' field.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder clearMellomnavn() {
      mellomnavn = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'etternavn' field.
      * @return The value.
      */
    public java.lang.CharSequence getEtternavn() {
      return etternavn;
    }


    /**
      * Sets the value of the 'etternavn' field.
      * @param value The value of 'etternavn'.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder setEtternavn(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.etternavn = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'etternavn' field has been set.
      * @return True if the 'etternavn' field has been set, false otherwise.
      */
    public boolean hasEtternavn() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'etternavn' field.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder clearEtternavn() {
      etternavn = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'tags' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getTags() {
      return tags;
    }


    /**
      * Sets the value of the 'tags' field.
      * @param value The value of 'tags'.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder setTags(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.tags = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'tags' field has been set.
      * @return True if the 'tags' field has been set, false otherwise.
      */
    public boolean hasTags() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'tags' field.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder clearTags() {
      tags = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'adresse' field.
      * @return The value.
      */
    public no.nav.registre.testnorge.libs.avro.person.Adresse getAdresse() {
      return adresse;
    }


    /**
      * Sets the value of the 'adresse' field.
      * @param value The value of 'adresse'.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder setAdresse(no.nav.registre.testnorge.libs.avro.person.Adresse value) {
      validate(fields()[6], value);
      this.adresseBuilder = null;
      this.adresse = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'adresse' field has been set.
      * @return True if the 'adresse' field has been set, false otherwise.
      */
    public boolean hasAdresse() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'adresse' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public no.nav.registre.testnorge.libs.avro.person.Adresse.Builder getAdresseBuilder() {
      if (adresseBuilder == null) {
        if (hasAdresse()) {
          setAdresseBuilder(no.nav.registre.testnorge.libs.avro.person.Adresse.newBuilder(adresse));
        } else {
          setAdresseBuilder(no.nav.registre.testnorge.libs.avro.person.Adresse.newBuilder());
        }
      }
      return adresseBuilder;
    }

    /**
     * Sets the Builder instance for the 'adresse' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder setAdresseBuilder(no.nav.registre.testnorge.libs.avro.person.Adresse.Builder value) {
      clearAdresse();
      adresseBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'adresse' field has an active Builder instance
     * @return True if the 'adresse' field has an active Builder instance
     */
    public boolean hasAdresseBuilder() {
      return adresseBuilder != null;
    }

    /**
      * Clears the value of the 'adresse' field.
      * @return This builder.
      */
    public no.nav.registre.testnorge.libs.avro.person.Person.Builder clearAdresse() {
      adresse = null;
      adresseBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Person build() {
      try {
        Person record = new Person();
        record.ident = fieldSetFlags()[0] ? this.ident : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.foedselsdato = fieldSetFlags()[1] ? this.foedselsdato : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.fornavn = fieldSetFlags()[2] ? this.fornavn : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.mellomnavn = fieldSetFlags()[3] ? this.mellomnavn : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.etternavn = fieldSetFlags()[4] ? this.etternavn : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.tags = fieldSetFlags()[5] ? this.tags : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        if (adresseBuilder != null) {
          try {
            record.adresse = this.adresseBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("adresse"));
            throw e;
          }
        } else {
          record.adresse = fieldSetFlags()[6] ? this.adresse : (no.nav.registre.testnorge.libs.avro.person.Adresse) defaultValue(fields()[6]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Person>
    WRITER$ = (org.apache.avro.io.DatumWriter<Person>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Person>
    READER$ = (org.apache.avro.io.DatumReader<Person>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.ident);

    out.writeString(this.foedselsdato);

    out.writeString(this.fornavn);

    if (this.mellomnavn == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.mellomnavn);
    }

    out.writeString(this.etternavn);

    long size0 = this.tags.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.tags) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.adresse == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      this.adresse.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ident = in.readString(this.ident instanceof Utf8 ? (Utf8)this.ident : null);

      this.foedselsdato = in.readString(this.foedselsdato instanceof Utf8 ? (Utf8)this.foedselsdato : null);

      this.fornavn = in.readString(this.fornavn instanceof Utf8 ? (Utf8)this.fornavn : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.mellomnavn = null;
      } else {
        this.mellomnavn = in.readString(this.mellomnavn instanceof Utf8 ? (Utf8)this.mellomnavn : null);
      }

      this.etternavn = in.readString(this.etternavn instanceof Utf8 ? (Utf8)this.etternavn : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.tags;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("tags").schema());
        this.tags = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.adresse = null;
      } else {
        if (this.adresse == null) {
          this.adresse = new no.nav.registre.testnorge.libs.avro.person.Adresse();
        }
        this.adresse.customDecode(in);
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ident = in.readString(this.ident instanceof Utf8 ? (Utf8)this.ident : null);
          break;

        case 1:
          this.foedselsdato = in.readString(this.foedselsdato instanceof Utf8 ? (Utf8)this.foedselsdato : null);
          break;

        case 2:
          this.fornavn = in.readString(this.fornavn instanceof Utf8 ? (Utf8)this.fornavn : null);
          break;

        case 3:
          if (in.readIndex() != 0) {
            in.readNull();
            this.mellomnavn = null;
          } else {
            this.mellomnavn = in.readString(this.mellomnavn instanceof Utf8 ? (Utf8)this.mellomnavn : null);
          }
          break;

        case 4:
          this.etternavn = in.readString(this.etternavn instanceof Utf8 ? (Utf8)this.etternavn : null);
          break;

        case 5:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.tags;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("tags").schema());
            this.tags = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 6:
          if (in.readIndex() != 0) {
            in.readNull();
            this.adresse = null;
          } else {
            if (this.adresse == null) {
              this.adresse = new no.nav.registre.testnorge.libs.avro.person.Adresse();
            }
            this.adresse.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}











on:
  workflow_call:
    inputs:
      cluster:
        type: string
        description: "The cluster to deploy to, e.g. dev-fss."
        required: false
        default: "dev-gcp"
      working-directory:
        type: string
        description: "The working directory for the job, e.g. apps/dolly-backend (without leading/trailing slash)."
        required: true
      image-suffix:
        type: string
        description: "The Docker image suffix used for this particular workflow, e.g. dolly-backend. Defaults to the workflow name."
        required: false
        default: ${{ github.workflow }}
      nais-manifest:
        type: string
        description: "The NAIS manifest file. Make sure it exists in the working-directory. Defaults to config.yml."
        required: false
        default: "config.yml"
      deploy-tag:
        type: string
        description: "The commit message tag that will trigger a deployment on a commit to a non-master branch, e.g. #deploy-dolly-backend. Make sure it is not a substring of other deploy tags."
        required: true
      deploy-tag-test:
        type: string
        description: "The commit message tag that will trigger a deployment to the test environment on a commit to a non-master branch, e.g. #deploy-test-dolly-backend."
        required: false
      force-deploy-test:
        type: boolean
        description: "Used to force deployment to test. Will override any #nodeploy tag. Make sure the working-directory contains a config.test.yml!"
        required: false
        default: false
      force-deploy:
        type: boolean
        description: "Used to force deployment. Will override any #nodeploy tag."
        required: false
        default: false
      sonar-enabled:
        type: boolean
        description: "Whether to run SonarQube analysis or not."
        required: false
        default: true
    secrets:
      NAIS_DOLLY_DEPLOY_API_KEY:
        required: true
      NAIS_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      NAV_TOKEN:
        required: true
      SONAR_TOKEN:
        required: true

jobs:

  start:
    runs-on: ubuntu-latest
    steps:
      - name: "Logging"
        run: |
          echo "branch: ${{ github.ref }}"
          echo "inputs: ${{ toJSON(inputs) }}"
          echo "env: ${{ toJSON(env) }}"
          echo "commit: ${{ github.event.head.commit_message }}"
    outputs:
      do-deploy-test: ${{ inputs.force-deploy-test || (!contains(github.event.head_commit.message, '#nodeploy') && (inputs.deploy-tag-test != '') && (github.ref == 'refs/heads/master' || contains(github.event.head_commit.message, inputs.deploy-tag-test))) }}
      do-deploy: ${{ inputs.force-deploy || (!contains(github.event.head_commit.message, '#nodeploy') && (inputs.deploy-tag != '') && (github.ref == 'refs/heads/master' || contains(github.event.head_commit.message, inputs.deploy-tag))) }}

  build:
    needs: start
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: "Setup"
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
      - name: "Gradle"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: token
          NAV_TOKEN: ${{ secrets.NAV_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: ${{ inputs.working-directory }}
          arguments: build ${{ inputs.sonar-enabled && 'jacocoTestReport sonar' || '' }} --scan
          cache-read-only: false
      - name: "Docker"
        id: docker-build-push
        uses: nais/docker-build-push@v0
        with:
          team: dolly
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          dockerfile: ${{ inputs.working-directory }}/Dockerfile
          docker_context: ${{ inputs.working-directory }}
          image_suffix: ${{ inputs.image-suffix }}
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}

  deploy:
    needs: [start, build]
    if: needs.start.outputs.do-deploy == 'true'
    concurrency: ${{ inputs.image-suffix }}
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: "Deploy"
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DOLLY_DEPLOY_API_KEY }}
          CLUSTER: ${{ inputs.cluster }}
          RESOURCE: ${{ inputs.working-directory }}/${{ inputs.nais-manifest }}
          VAR: image=${{ needs.build.outputs.image }}

  deploy-test:
    needs: [start, build]
    if: needs.start.outputs.do-deploy-test == 'true'
    concurrency: ${{ inputs.image-suffix }}-test
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: "Deploy (test)"
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DOLLY_DEPLOY_API_KEY }}
          CLUSTER: ${{ inputs.cluster }}
          RESOURCE: ${{ inputs.working-directory }}/config.test.yml
          VAR: image=${{ needs.build.outputs.image }}
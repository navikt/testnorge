on:
  workflow_call:
    inputs:
      cluster:
        type: string
        description: "The cluster to deploy to, e.g. dev-gcp."
        required: false
        default: "dev-gcp"
      working-directory:
        type: string
        description: "The working directory for the job, e.g. apps/dolly-frontend (without leading/trailing slash)."
        required: true
      image-suffix:
        type: string
        description: "The Docker image suffix used for this particular workflow, e.g. dolly-frontend. Defaults to the workflow name."
        required: false
        default: ${{ github.workflow }}
      nais-manifest:
        type: string
        description: "The NAIS manifest file. Make sure it exists in the working-directory. Defaults to config.yml."
        required: false
        default: "config.yml"
      deploy-tag:
        type: string
        description: "The commit message tag that will trigger a deployment on a commit to a non-master branch, e.g. #deploy-frontend. Make sure it is not a substring of other deploy tags."
        required: true
      deploy-tag-test:
        type: string
        description: "The commit message tag that will trigger a deployment to the test environment on a commit to a non-master branch, e.g. #deploy-test-frontend."
        required: false
      deploy-tag-idporten:
        type: string
        description: "The commit message tag that will trigger a deployment to the 'idporten' environment on a commit to a non-master branch, e.g. #deploy-idporten-frontend."
        required: false
      deploy-tag-unstable:
        type: string
        description: "The commit message tag that will trigger a deployment to the 'unstable' environment on a commit to a non-master branch, e.g. #deploy-unstable-frontend."
        required: false
      force-deploy:
        type: boolean
        description: "Used to force deployment."
        required: false
        default: false
      force-deploy-test:
        type: boolean
        description: "Used to force deployment to test. Make sure the working-directory contains a config.test.yml!"
        required: false
        default: false
      force-deploy-idporten:
        type: boolean
        description: "Used to force deployment to idporten, only relevant for dolly-frontend. Make sure the working-directory contains a config.idporten.yml!"
        required: false
        default: false
      force-deploy-unstable:
        type: boolean
        description: "Used to force deployment to unstable, only relevant for dolly-frontend. Make sure the working-directory contains a config.unstable.yml!"
        required: false
        default: false
      sonar-enabled:
        type: boolean
        description: "Whether to run SonarQube analysis or not."
        required: false
        default: true
    secrets:
      NAIS_DOLLY_DEPLOY_API_KEY:
        required: true
      NAIS_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      NAV_TOKEN:
        required: true
      READER_TOKEN:
        required: true
      SONAR_TOKEN:
        required: true

jobs:

  start:
    runs-on: ubuntu-latest
    steps:
      - name: "Logging"
        run: |
          echo "branch: ${{ github.ref }}"
          echo "inputs: ${{ toJSON(inputs) }}"
          echo "env: ${{ toJSON(env) }}"
          echo "commit: ${{ github.event.head.commit_message }}"
    outputs:
      do-deploy: ${{ inputs.force-deploy || (!contains(github.event.head_commit.message, '#nodeploy') && (inputs.deploy-tag != '') && (github.ref == 'refs/heads/master' || contains(github.event.head_commit.message, inputs.deploy-tag))) }}
      do-deploy-test: ${{ inputs.force-deploy-test || (!contains(github.event.head_commit.message, '#nodeploy') && inputs.deploy-tag-test != '' && (github.ref == 'refs/heads/master' || contains(github.event.head_commit.message, inputs.deploy-tag-test))) }}
      do-deploy-idporten: ${{ inputs.force-deploy-idporten || (!contains(github.event.head_commit.message, '#nodeploy') && inputs.deploy-tag-idporten != '' && (github.ref == 'refs/heads/master' || contains(github.event.head_commit.message, inputs.deploy-tag-idporten))) }}
      do-deploy-unstable: ${{ inputs.force-deploy-unstable || (!contains(github.event.head_commit.message, '#nodeploy') && (inputs.deploy-tag-unstable != '') && (github.ref == 'refs/heads/master' || contains(github.event.head_commit.message, inputs.deploy-tag-unstable))) }}
      artifact: ${{ inputs.image-suffix }}-${{ github.run_number}}-artifact

  build:
    needs: start
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Setup (Node)"
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@navikt'
      - name: "Install (Node)"
        working-directory: ${{ inputs.working-directory }}/src/main/js
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: "Build (Node)"
        working-directory: ${{ inputs.working-directory }}/src/main/js
        run: npm run build
      - name: "Move (Node)"
        working-directory: ${{ inputs.working-directory }}/src/main/js
        run: mv build ../resources/static
      - name: "Java"
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
      - name: "Gradle"
        uses: gradle/gradle-build-action@v3
        with:
          build-root-directory: ${{ inputs.working-directory }}
          arguments: build ${{ inputs.sonar-enabled && 'jacocoTestReport sonar' || '' }} --scan
          cache-read-only: false
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: "Docker"
        id: docker-build-push
        if: |
          needs.start.outputs.do-deploy-unstable == 'true' ||
          needs.start.outputs.do-deploy-idporten == 'true' ||
          needs.start.outputs.do-deploy-test == 'true' ||
          needs.start.outputs.do-deploy == 'true'
        uses: nais/docker-build-push@v0
        with:
          team: dolly
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          dockerfile: ${{ inputs.working-directory }}/Dockerfile
          docker_context: ${{ inputs.working-directory }}
          image_suffix: ${{ inputs.image-suffix }}
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}

  deploy:
    needs: [start, build]
    if: needs.start.outputs.do-deploy == 'true'
    concurrency: ${{ inputs.image-suffix }}
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Deploy"
        uses: nais/deploy/actions/deploy@v2
        env:
          APIKEY: ${{ secrets.NAIS_DOLLY_DEPLOY_API_KEY }}
          CLUSTER: ${{ inputs.cluster }}
          RESOURCE: ${{ inputs.working-directory }}/${{ inputs.nais-manifest }}
          VAR: image=${{ needs.build.outputs.image }}

  deploy-test:
    needs: [start, build]
    if: needs.start.outputs.do-deploy-test == 'true'
    concurrency: ${{ inputs.image-suffix }}-test
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Deploy (test)"
        uses: nais/deploy/actions/deploy@v2
        env:
          APIKEY: ${{ secrets.NAIS_DOLLY_DEPLOY_API_KEY }}
          CLUSTER: ${{ inputs.cluster }}
          RESOURCE: ${{ inputs.working-directory }}/config.test.yml
          VAR: image=${{ needs.build.outputs.image }}

  # Only used by dolly-frontend.
  deploy-idporten:
    needs: [start, build]
    if: needs.start.outputs.do-deploy-idporten == 'true'
    concurrency: ${{ inputs.image-suffix }}-idporten
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Deploy (idporten)"
        uses: nais/deploy/actions/deploy@v2
        env:
          APIKEY: ${{ secrets.NAIS_DOLLY_DEPLOY_API_KEY }}
          CLUSTER: ${{ inputs.cluster }}
          RESOURCE: ${{ inputs.working-directory }}/config.idporten.yml
          VAR: image=${{ needs.build.outputs.image }}

  # Only used by dolly-frontend.
  deploy-unstable:
    needs: [start, build]
    if: needs.start.outputs.do-deploy-unstable == 'true'
    concurrency: ${{ inputs.image-suffix }}-unstable
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Deploy (unstable)"
        uses: nais/deploy/actions/deploy@v2
        env:
          APIKEY: ${{ secrets.NAIS_DOLLY_DEPLOY_API_KEY }}
          CLUSTER: ${{ inputs.cluster }}
          RESOURCE: ${{ inputs.working-directory }}/config.unstable.yml
          VAR: image=${{ needs.build.outputs.image }}
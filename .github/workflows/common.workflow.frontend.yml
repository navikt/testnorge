on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        description: "The working directory for the job, e.g. apps/dolly-frontend (without leading/trailing slash)."
        required: true
      deploy-tag:
        type: string
        description: "The commit message tag that will trigger a deployment on a commit to a non-master branch, e.g. #deploy-frontend. Make sure it is not a substring of other deploy tags."
        required: true
      deploy-tag-test:
        type: string
        description: "The commit message tag that will trigger a deployment to the test environment on a commit to a non-master branch, e.g. #deploy-test-frontend."
        required: false
      deploy-tag-idporten:
        type: string
        description: "The commit message tag that will trigger a deployment to the 'idporten' environment on a commit to a non-master branch, e.g. #deploy-idporten-frontend."
        required: false
      deploy-tag-unstable:
        type: string
        description: "The commit message tag that will trigger a deployment to the 'unstable' environment on a commit to a non-master branch, e.g. #deploy-unstable-frontend."
        required: false
    secrets:
      NAIS_DOLLY_DEPLOY_API_KEY:
        required: true
      NAIS_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      NAV_TOKEN:
        required: true
      READER_TOKEN:
        required: true
      SONAR_TOKEN:
        required: true

env:
  do-deploy-unstable: ${{ github.ref == 'refs/heads/master' || ( inputs.deploy-tag-unstable != '' && contains(github.event.head_commit.message, inputs.deploy-tag-unstable) ) }}
  do-deploy-idporten: ${{ github.ref == 'refs/heads/master' || ( inputs.deploy-tag-idporten != '' && contains(github.event.head_commit.message, inputs.deploy-tag-idporten) ) }}
  do-deploy-test: ${{ github.ref == 'refs/heads/master' || ( inputs.deploy-tag-test != '' && contains(github.event.head_commit.message, inputs.deploy-tag-test) ) }}
  do-deploy: ${{ github.ref == 'refs/heads/master' || ( inputs.deploy-tag != '' && contains(github.event.head_commit.message, inputs.deploy-tag) ) }}

jobs:

  sonar:
    uses: ./.github/workflows/common.sonar.yml
    with:
      working-directory: ${{ inputs.working-directory }}
    secrets:
      NAV_TOKEN: ${{ secrets.NAV_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    if: github.actor != 'dependabot[bot]'
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: "Cache"
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
            ${{ runner.os }}-gradle-
            ${{ runner.os }}-
      - name: "Setup (Node)"
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@navikt'
      - name: "Install (Node)"
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
        working-directory: ${{ inputs.working-directory }}/src/main/js
      - name: "Build (Node)"
        run: npm run build
        working-directory: ${{ inputs.working-directory }}/src/main/js
      - name: "Move (Node)"
        run: mv build ../resources/static
        working-directory: ${{ inputs.working-directory }}/src/main/js
      - name: "Setup (Java)"
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17.x'
      - name: "Build (Java)"
        env:
          GITHUB_USERNAME: token
          NAV_TOKEN: ${{ secrets.NAV_TOKEN }}
        working-directory: ${{ inputs.working-directory }}
        run: ./gradlew build --scan
      - name: "Docker"
        uses: nais/docker-build-push@v0
        if: |
          env.do-deploy-unstable == 'true' ||
          env.do-deploy-idporten == 'true' ||
          env.do-deploy-test == 'true' ||
          env.do-deploy == 'true'
        id: docker-build-push
        with:
          team: dolly
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          dockerfile: ${{ inputs.working-directory }}/Dockerfile
          docker_context: ${{ inputs.working-directory }}
          image_suffix: ${{ github.workflow }}
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}

  # Only used by dolly-frontend.
  deploy-unstable:
    needs: build
    if: ${{ env.do-deploy-unstable == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: "Deploy (unstable)"
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DOLLY_DEPLOY_API_KEY }}
          CLUSTER: dev-gcp
          RESOURCE: ${{ inputs.working-directory }}/config.unstable.yml
          VAR: image=${{ needs.build.outputs.image }}

  # Only used by dolly-frontend.
  deploy-idporten:
    needs: build
    if: ${{ env.do-deploy-idporten == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
      - name: "Deploy (idporten)"
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DOLLY_DEPLOY_API_KEY }}
          CLUSTER: dev-gcp
          RESOURCE: ${{ inputs.working-directory }}/config.idporten.yml
          VAR: image=${{ needs.build.outputs.image }}

  deploy-test:
    needs: build
    if: ${{ env.do-deploy-test == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Deploy (test)"
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DOLLY_DEPLOY_API_KEY }}
          CLUSTER: dev-gcp
          RESOURCE: ${{ inputs.working-directory }}/config.test.yml
          VAR: image=${{ needs.build.outputs.image }}

  deploy:
    needs: build
    if: ${{ env.do-deploy == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Deploy"
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DOLLY_DEPLOY_API_KEY }}
          CLUSTER: dev-gcp
          RESOURCE: ${{ inputs.working-directory }}/config.yml
          VAR: image=${{ needs.build.outputs.image }}